{"openapi": "3.0.2", "info": {"title": "ivoa-cutout-poc", "description": "Proof-of-concept cutout service with JSON-based protocol", "version": "0.1.dev10+g9170d93.d20230526"}, "paths": {"/": {"get": {"summary": "Application metadata", "description": "Return metadata about the running application. Can also be used as a health check. This route is not exposed outside the cluster and therefore cannot be used by external clients.", "operationId": "get_index__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Metadata"}}}}}}}, "/api/cutout": {"get": {"summary": "Application metadata", "description": "Metadata about the application, returned by a request for the root of the external API.", "operationId": "get_index_api_cutout_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Index"}}}}, "401": {"description": "Unauthenticated"}}}}, "/api/cutout/availability": {"get": {"summary": "IVOA service availability", "description": "VOSI-availability resource for the image cutout service", "operationId": "get_availability_api_cutout_availability_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Availability"}}}}, "401": {"description": "Unauthenticated"}}}}, "/api/cutout/capabilities": {"get": {"summary": "IVOA service capabilities", "description": "VOSI-capabilities resource for the image cutout service", "operationId": "get_capabilities_api_cutout_capabilities_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Capabilities"}}}}, "401": {"description": "Unauthenticated"}}}}, "/api/cutout/sync": {"post": {"summary": "Synchronous cutout", "description": "Synchronously request a cutout. This will wait for the cutout to be completed and return the resulting image as a FITS file. (The image will be returned via a redirect to a URL at the underlying object store.)", "operationId": "post_sync_api_cutout_sync_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CutoutJobCreate"}}}, "required": true}, "responses": {"303": {"description": "Redirect to result of successful cutout"}, "401": {"description": "Unauthenticated"}, "400": {"description": "Cutout job failed"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cutout/jobs": {"get": {"summary": "Async job list", "description": "List all existing jobs for the current user. Jobs will be sorted by creation date, with the most recently created listed first.", "operationId": "get_job_list_api_cutout_jobs_get", "parameters": [{"description": "Limit results to the provided execution phases", "required": false, "schema": {"title": "Execution phase", "type": "array", "items": {"$ref": "#/components/schemas/ExecutionPhase"}, "description": "Limit results to the provided execution phases"}, "name": "phase", "in": "query"}, {"description": "Limit results to jobs created after this date", "required": false, "schema": {"title": "Creation date", "type": "string", "description": "Limit results to jobs created after this date", "format": "date-time"}, "name": "after", "in": "query"}, {"description": "Return at most the given number of jobs", "required": false, "schema": {"title": "Number of jobs", "type": "integer", "description": "Return at most the given number of jobs"}, "name": "last", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Get Job List Api Cutout Jobs Get", "type": "array", "items": {"$ref": "#/components/schemas/JobDescription"}}}}}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"summary": "Create async job", "operationId": "create_job_api_cutout_jobs_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CutoutAsyncJobCreate"}}}, "required": true}, "responses": {"303": {"description": "Successful Response"}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cutout/jobs/{job_id}": {"get": {"summary": "Job details", "operationId": "get_job_api_cutout_jobs__job_id__get", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "string"}, "name": "job_id", "in": "path"}, {"description": "Maximum number of seconds to wait or -1 to wait for as long as the server permits", "required": false, "schema": {"title": "Wait for status changes", "type": "integer", "description": "Maximum number of seconds to wait or -1 to wait for as long as the server permits"}, "name": "wait", "in": "query"}, {"description": "When waiting for status changes, consider this to be the initial execution phase. If the phase has already changed, return immediately. This parameter should always be provided when wait is used.", "required": false, "schema": {"title": "Initial phase for waiting", "allOf": [{"$ref": "#/components/schemas/ExecutionPhase"}], "description": "When waiting for status changes, consider this to be the initial execution phase. If the phase has already changed, return immediately. This parameter should always be provided when wait is used."}, "name": "phase", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CutoutJob"}}}}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"summary": "Delete a job", "operationId": "delete_job_api_cutout_jobs__job_id__delete", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "string"}, "name": "job_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"summary": "Update a job", "operationId": "patch_job_api_cutout_jobs__job_id__patch", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "string"}, "name": "job_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CutoutJob"}}}}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cutout/jobs/{job_id}/start": {"post": {"summary": "Start a job", "operationId": "job_start_api_cutout_jobs__job_id__start_post", "parameters": [{"required": true, "schema": {"title": "Job Id", "type": "string"}, "name": "job_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobStart"}}}, "required": true}, "responses": {"303": {"description": "Successful Response"}, "401": {"description": "Unauthenticated"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"Availability": {"title": "Availability", "required": ["available"], "type": "object", "properties": {"available": {"title": "Whether the service appears to be available", "type": "boolean", "example": false}, "up_since": {"title": "Time service last became available", "type": "string", "format": "date-time", "example": "2023-01-12T14:52:45Z"}, "down_at": {"title": "Time of next scheduled downtime", "type": "string", "format": "date-time", "example": "2023-02-25T13:00:00Z"}, "back_at": {"title": "Time service will become available after downtime", "type": "string", "format": "date-time", "example": "2023-02-25T17:00:00Z"}, "note": {"title": "Supplemental information", "type": "string", "description": "Usually empty unless the service is not available.", "example": "Database not available"}}, "description": "Availability information (from VOSI)."}, "Capabilities": {"title": "Capabilities", "required": ["availability_url", "capabilities_url", "soda_sync_url", "soda_async_url"], "type": "object", "properties": {"availability_url": {"title": "Availability endpoint", "maxLength": 2083, "minLength": 1, "type": "string", "format": "uri"}, "capabilities_url": {"title": "Capabilities endpoint", "maxLength": 2083, "minLength": 1, "type": "string", "format": "uri"}, "soda_sync_url": {"title": "SODA cutout sync URL", "maxLength": 2083, "minLength": 1, "type": "string", "format": "uri"}, "soda_async_url": {"title": "SODA cutout async URL", "maxLength": 2083, "minLength": 1, "type": "string", "format": "uri"}}, "description": "Capabilities for the SODA service.\n\nThis is only a proof of concept.  A real JSON-based capability system\nwould include more metadata, such as URIs for specific implemented\nstandards.  The key point this demonstrates is the model representation\nand the ease of writing the handler, not the specific details of the\nresulting JSON."}, "CircleStencil": {"title": "CircleStencil", "required": ["center", "radius"], "type": "object", "properties": {"type": {"title": "Type", "enum": ["circle"], "type": "string", "default": "circle"}, "center": {"title": "Center of circle", "allOf": [{"$ref": "#/components/schemas/Point"}]}, "radius": {"title": "Radius of circle", "type": "number"}}, "description": "Represents a circular stencil."}, "CutoutAsyncJobCreate": {"title": "CutoutAsyncJobCreate", "required": ["parameters"], "type": "object", "properties": {"parameters": {"title": "Job parameters", "allOf": [{"$ref": "#/components/schemas/CutoutParameters"}]}, "start": {"title": "Automatically start job", "type": "boolean", "default": false}, "run_id": {"title": "Opaque string provided by client", "type": "string", "description": "This field is intended for the client to add a unique identifier to all jobs that are part of a single operation from the perspective of the client. This may aid in tracing issues through a complex system, or identifying which operation a job is part of.", "example": "processing-run-40"}}, "description": "The async job creation model."}, "CutoutJob": {"title": "CutoutJob", "required": ["job_id", "owner", "phase", "creation_time", "parameters"], "type": "object", "properties": {"job_id": {"title": "Unique identifier", "type": "string", "example": "1478"}, "owner": {"title": "Identity of job owner", "type": "string", "example": "rra"}, "phase": {"title": "Current execution phase", "allOf": [{"$ref": "#/components/schemas/ExecutionPhase"}], "example": "executing"}, "run_id": {"title": "Opaque string provided by client", "type": "string", "description": "This field is intended for the client to add a unique identifier to all jobs that are part of a single operation from the perspective of the client. This may aid in tracing issues through a complex system, or identifying which operation a job is part of.", "example": "processing-run-40"}, "creation_time": {"title": "When the job was created", "type": "string", "format": "date-time", "example": "2023-01-13T14:53:00Z"}, "message_id": {"title": "Internal message identifier", "type": "string", "description": "Used by the work queuing system and not included in user-facing output."}, "start_time": {"title": "When the job started executing", "type": "string", "format": "date-time", "example": "2023-01-13T14:55:12Z"}, "end_time": {"title": "When the job stopped executing", "type": "string", "format": "date-time", "example": "2023-01-13T15:34:14Z"}, "destruction_time": {"title": "Time at which job should be destroyed", "type": "string", "description": "At this time, the job will be aborted if it is still running, its results will be deleted, and all record of the job will be discarded.", "format": "date-time", "example": "2023-02-13T14:53:00Z"}, "execution_duration": {"title": "Allowed maximum execution duration in seconds", "type": "number", "description": "Specified in elapsed wall clock time. If not present, there is no limit. If the job runs for longer than this time period, it will be aborted.", "format": "time-delta", "example": 36000}, "quote": {"title": "Expected completion time if started now", "type": "string", "description": "If not given, the expected duration of the job is not known. If later than the destruction time, the job is not possible due to resource constraints.", "format": "date-time", "example": "2023-02-13T14:53:00Z"}, "error": {"title": "Error information", "allOf": [{"$ref": "#/components/schemas/JobError"}]}, "parameters": {"title": "Job parameters", "allOf": [{"$ref": "#/components/schemas/CutoutParameters"}]}, "results": {"title": "Results of the job", "type": "array", "items": {"$ref": "#/components/schemas/JobResult"}}}, "description": "The corresponding job model."}, "CutoutJobCreate": {"title": "CutoutJobCreate", "required": ["parameters"], "type": "object", "properties": {"parameters": {"title": "Job parameters", "allOf": [{"$ref": "#/components/schemas/CutoutParameters"}]}, "run_id": {"title": "Opaque string provided by client", "type": "string", "description": "This field is intended for the client to add a unique identifier to all jobs that are part of a single operation from the perspective of the client. This may aid in tracing issues through a complex system, or identifying which operation a job is part of.", "example": "processing-run-40"}}, "description": "The sync job creation model."}, "CutoutParameters": {"title": "CutoutParameters", "required": ["ids", "stencils"], "type": "object", "properties": {"ids": {"title": "Dataset IDs on which to operate", "type": "array", "items": {"type": "string"}}, "stencils": {"title": "The cutout stencils to apply", "type": "array", "items": {"anyOf": [{"$ref": "#/components/schemas/CircleStencil"}, {"$ref": "#/components/schemas/PolygonStencil"}, {"$ref": "#/components/schemas/RangeStencil"}]}}}, "description": "The parameters to a cutout request."}, "ExecutionPhase": {"title": "ExecutionPhase", "enum": ["pending", "queued", "executing", "completed", "error", "aborted", "unknown", "held", "suspended", "archived"], "description": "Possible execution phases for a UWS job."}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "Index": {"title": "Index", "required": ["metadata"], "type": "object", "properties": {"metadata": {"title": "Package metadata", "allOf": [{"$ref": "#/components/schemas/Metadata"}]}}, "description": "Metadata returned by the external root URL of the application.\n\nNotes\n-----\nAs written, this is not very useful. Add additional metadata that will be\nhelpful for a user exploring the application, or replace this model with\nsome other model that makes more sense to return from the application API\nroot."}, "JobDescription": {"title": "JobDescription", "required": ["job_id", "owner", "phase", "creation_time"], "type": "object", "properties": {"job_id": {"title": "Unique identifier", "type": "string", "example": "1478"}, "owner": {"title": "Identity of job owner", "type": "string", "example": "rra"}, "phase": {"title": "Current execution phase", "allOf": [{"$ref": "#/components/schemas/ExecutionPhase"}], "example": "executing"}, "run_id": {"title": "Opaque string provided by client", "type": "string", "description": "This field is intended for the client to add a unique identifier to all jobs that are part of a single operation from the perspective of the client. This may aid in tracing issues through a complex system, or identifying which operation a job is part of.", "example": "processing-run-40"}, "creation_time": {"title": "When the job was created", "type": "string", "format": "date-time", "example": "2023-01-13T14:53:00Z"}}, "description": "Brief job description used for the job list."}, "JobError": {"title": "JobError", "required": ["error_code", "message"], "type": "object", "properties": {"error_code": {"title": "Code for the error", "type": "string", "example": "permission_denied"}, "message": {"title": "Brief error message", "type": "string", "example": "Permission denied"}, "detail": {"title": "Extended error message", "type": "string", "example": "No access to backend service"}}, "description": "Failure information about a job."}, "JobResult": {"title": "JobResult", "required": ["result_id", "url"], "type": "object", "properties": {"result_id": {"title": "Identifier for the result", "type": "string", "example": "cutout"}, "url": {"title": "URL for the result", "type": "string", "description": "User-facing URL that can be retrieved directly by the user. This may be a signed URL or similar temporary-use URL that is different from a persistent internal URL."}, "size": {"title": "Size of the result in bytes", "type": "integer", "example": 517135}, "mime_type": {"title": "MIME type of the result", "type": "string", "example": "application/fits"}}, "description": "A single result from the job."}, "JobStart": {"title": "JobStart", "required": ["start"], "type": "object", "properties": {"start": {"title": "Must be true", "enum": [true], "type": "boolean"}}, "description": "Body for route to start a job.\n\nNotes\n-----\nThis model is required only to force the input to be JSON, and thus force\na CORS check, preventing CSRF that would otherwise be possible with a\nbodyless POST with any content type.  It contains no semantic content."}, "JobUpdate": {"title": "JobUpdate", "type": "object", "properties": {"destruction_time": {"title": "Time at which job should be destroyed", "type": "string", "description": "At this time, the job will be aborted if it is still running, its results will be deleted, and all record of the job will be discarded.", "format": "date-time", "example": "2023-02-13T14:53:00Z"}, "execution_duration": {"title": "Allowed maximum execution duration in seconds", "type": "number", "description": "Specified in elapsed wall clock time. If not present, there is no limit. If the job runs for longer than this time period, it will be aborted.", "format": "time-delta", "example": 36000}}, "description": "Requested update to a job.\n\nThis represents only the fields of a `Job` that can be changed after job\ncreation and can be provided to the PATCH route."}, "Metadata": {"title": "Metadata", "required": ["name", "version"], "type": "object", "properties": {"name": {"title": "Application name", "type": "string", "example": "myapp"}, "version": {"title": "Version", "type": "string", "example": "1.0.0"}, "description": {"title": "Description", "type": "string", "example": "string"}, "repository_url": {"title": "Repository URL", "type": "string", "example": "https://example.com/"}, "documentation_url": {"title": "Documentation URL", "type": "string", "example": "https://example.com/"}}, "description": "Metadata about a package."}, "Point": {"title": "Point", "required": ["ra", "dec"], "type": "object", "properties": {"ra": {"title": "ICRS ra in degrees", "type": "number"}, "dec": {"title": "ICRS dec in degrees", "type": "number"}}, "description": "Represents a point in the sky."}, "PolygonStencil": {"title": "PolygonStencil", "required": ["vertices"], "type": "object", "properties": {"type": {"title": "Type", "enum": ["polygon"], "type": "string", "default": "polygon"}, "vertices": {"title": "Vertices of polygon", "type": "array", "items": {"$ref": "#/components/schemas/Point"}, "description": "Polygon winding must be counter-clockwise when viewed from the origin towards the sky."}}, "description": "Represents a polygon stencil."}, "Range": {"title": "Range", "required": ["min", "max"], "type": "object", "properties": {"min": {"title": "Minimum value", "type": "number"}, "max": {"title": "Maximum value", "type": "number"}}, "description": "Represents a range of values."}, "RangeStencil": {"title": "RangeStencil", "required": ["ra", "dec"], "type": "object", "properties": {"type": {"title": "Type", "enum": ["range"], "type": "string", "default": "range"}, "ra": {"title": "Range of ICRS ra values", "allOf": [{"$ref": "#/components/schemas/Range"}]}, "dec": {"title": "Range of ICRS dec values", "allOf": [{"$ref": "#/components/schemas/Range"}]}}, "description": "Represents a range of ra and dec values."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}